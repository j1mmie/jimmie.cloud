<h2>Hitboxes The Feel Good</h2>

<!-- wp:paragraph -->
<p>Update: Ready Set Goat has been released! Check out more at <a href="https://www.readysetgoat.com">www.ReadySetGoat.com</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>iOS: <a href="https://apps.apple.com/us/app/ready-set-goat/id1498158058?ls=1">https://apps.apple.com/us/app/ready-set-goat/id1498158058?ls=1</a><br>Android: <a href="https://play.google.com/store/apps/details?id=net.subpixel.ReadySetGoat">https://play.google.com/store/apps/details?id=net.subpixel.ReadySetGoat</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you’re in a hurry, <a href="#implementation">skip to the approach I used</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>We're developing a game that utilizes an age old mechanic - the <a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/GoombaStomp">Goomba Stomp</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:video {"id":198,"align":"center"} -->
<figure class="wp-block-video aligncenter"><video autoplay controls loop muted src="https://www.subpixel.net/wp-content/uploads/2020/03/79214DBD-5D6D-4FBF-8F7D-5FC56D851537.mp4" playsinline></video><figcaption>Ready Set Goat gameplay clips</figcaption></figure>
<!-- /wp:video -->

<!-- wp:paragraph -->
<p>There's a common classical approach to this mechanic. A single, monolithic hitbox representing the physical space of the character. And that space is used for everything - stomping, getting hurt, and bumping into walls. (If you can't tell, I'm foreshadowing here.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's what the Goomba Stomp looks like in Mario, with an overlay of the hitboxes next to it:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center"><img class="wp-image-51" style="width: 256px;" src="https://www.subpixel.net/wp-content/uploads/2020/03/ezgif.com-optimize.gif" alt="Mario stomping"> <img class="wp-image-63" style="width: 256px;" src="https://www.subpixel.net/wp-content/uploads/2020/03/Mario-Hitboxes.gif" alt="Mario stomping with hitboxes"></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By the way, there's a great video on YouTube that overlays the hitboxes for an entire speedrun. This is just fun to watch; check it out:</p>
<!-- /wp:paragraph -->

<!-- wp:core-embed/youtube {"url":"https://www.youtube.com/watch?v=eDaYK1cOCmw","type":"video","providerNameSlug":"youtube","className":"wp-embed-aspect-4-3 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-4-3 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?v=eDaYK1cOCmw
</div><figcaption>Courtesy user <a href="https://www.youtube.com/channel/UCzYROBp4ypAEOEy7G89aGaQ">qvidz on Youtube</a></figcaption></figure>
<!-- /wp:core-embed/youtube -->

<!-- wp:paragraph -->
<p>The first thing you'll notice is, <strong>you suck at Mario</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Just kidding, this is an AI playing the game. At least I think it is...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second thing you might notice is, the hitboxes are <strong>tight</strong>. They are typically smaller than the character, which gives the player some <strong>breathing room</strong>. You can overlap a few pixels with an enemy - maybe a hair on a mustache, a cheek, or a toe - and not be damaged.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There's some fudge factor here, and that makes the game slightly more forgiving. This is generally considered a good approach and should help produce a good <a href="https://en.wikipedia.org/wiki/Game_feel">Game Feel</a>. Mario's movement and feel were largely responsible for its success back in the 80s.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tight hitboxes are a tried and true method for implementing this mechanic. So why devote a whole blog post to them?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the course of implementing the Goomba Stomp in Ready Set Goat, I learned that just because it worked in one game, doesn't mean it would work in mine. And after weeks of playtesting, we decided that <em>something</em> needed to be changed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>1. Tight Hitboxes</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With tight hitboxes, Mario can stand next to a Goomba and not get punished for being a few pixels off. This is great. It's forgiving to the player; they probably won't even notice when it happens. They'd just notice if it <em>wasn't </em>there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But here's the problem:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":184,"width":300,"height":300,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Mario-Tight.gif" alt="" class="wp-image-184" width="300" height="300"/><figcaption>Mario visually stomps an enemy, but gets killed</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>See that? That extra breathing room works both ways. Now it benefits the Goomba.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this scenario, Mario appears to stomp some of the enemy's pixels, yet the player receives no reward. What's worse is that the Goomba continues moving, eventually slamming into Mario, causing the plumber's untimely demise.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Ready Set Goat, the action is much more fast paced than Mario; there's less time for the player to react to a misstep. So these weird situations can happen way more often. Let's look at some other hitbox approaches and see if they're any better.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>2. Loose Hitboxes</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Loose hitboxes work the opposite way. They give the player a huge footprint, allowing them to stomp from greater distances. In fact, the player might earn a stomp without any pixels touching. Right out of thin air.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":185,"width":300,"height":300,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Mario-Loose1.gif" alt="" class="wp-image-185" width="300" height="300"/><figcaption>Mario doesn't quite earn a stomp yet, but is awarded one</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>There are a few downsides to this approach. The first is that it might be too easy to stomp. You might think that that makes the game less challenging. But it actually makes it less <em>predictable</em>. In some cases, the player might not want to stomp because the implications could lead them to their death. So by trying to make things easier, we've just made the game more challenging.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Ready Set Goat, choosing when to stomp is just as important as choosing when not to stomp.</p>
<!-- /wp:paragraph -->

<!-- wp:video {"id":213,"align":"center"} -->
<figure class="wp-block-video aligncenter"><video autoplay controls loop muted src="https://www.subpixel.net/wp-content/uploads/2020/03/5E6F3418-3F1D-40BF-AA8B-8F381B2CAF95.mp4" playsinline></video><figcaption>Stomping an enemy at the wrong time could accidentally bounce the goat off into a different enemy.</figcaption></figure>
<!-- /wp:video -->

<!-- wp:paragraph -->
<p>The worst problem though, is that the player might time a jump <em>really</em> close to the enemy, and clip them on the way up, resulting in the player's death.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":188,"width":300,"height":300,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Mario-Loose2-1.gif" alt="" class="wp-image-188" width="300" height="300"/><figcaption>Mario should safely jump over the Goomba with this trajectory. But the hitboxes are too big and he gets owned.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>3. Pixel Perfect</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pixel Perfect hitboxes are an opinionated response to the question "How much breathing room should I give the player?" Its answer is<strong> exactly none</strong>. The player's stomps will connect predictably, but the player gets no leeway if they make a mistake.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":191,"width":300,"height":300,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/image-8.png" alt="" class="wp-image-191" width="300" height="300"/><figcaption>Unforgiving pixel-perfect collisions</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>While the community over at <strong><a href="http://reddit.com/r/hitboxporn">/r/hitboxporn</a></strong> might disagree, I believe this approach leads to an unforgiving game. While testing it out, I found myself frustrated with the exactness of Pixel Perfection.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, there are simple ways to correct this. For example, you could only count a collision if more than a certain percentage of pixel overlap. But that still suffers from the problem of being unpredictable.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>4. Composite Hitboxes</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The last common approach I can think of is Composite Hitboxes. However this approach doesn't answer the question "How much breathing room should I give the player?" It gives you a more accurate representation of the player's volume (just like Pixel Perfect), but the developer is still left to decide whether that space should be Tight or Loose.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":189,"width":300,"height":300,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/image-6.png" alt="" class="wp-image-189" width="300" height="300"/><figcaption>Example of composite hitboxes</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The approach by itself doesn't solve anything for us. But what about the idea in general? Multiple hitboxes... maybe we're on to something here.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Elephant... Er.... Goat in the Room</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After considering these four approaches, finally, it hit me like a ton of brick blocks. The hitboxes in Mario (and games like it) are having an identity crisis.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The space where Mario attacks from is the same space in which he's vulnerable. To complicate things further, it's also his physical space in the world; platforms and walls use this hitbox to determine if Mario bumped into them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To some, this sort of ambiguity might be an obvious problem. To me, it was an epiphany.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Player 2 Has Entered the Game</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To solve the problem, I looked outside the platformer genre for inspiration. A common pattern from a different genre gave me some ideas.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Fighting games use a different concept; a <strong>hurtbox</strong> and a <strong>hitbox</strong>. A hurtbox is the space where the player is vulnerable; where they get hurt. A hitbox is where a player's hits land.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":152,"width":300,"height":300,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Ryu-HurtboxHitbox.png" alt="" class="wp-image-152" width="300" height="300"/><figcaption>Fighter games break out character space into two types: Hitboxes and Hurtboxes</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<h3>A note on terminology:</h3>
<p>I come from a First Person Shooter background. In FPS's, we define a hitbox as <strong><a href="https://counterstrike.fandom.com/wiki/Hitbox">the area where a character can be hit</a></strong>. If you shoot a bullet at their hitbox, you hit them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But fighting games would call that a hurtbox.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Regardless, in Mario, there is no differentiation. Your hurtbox is your hitbox, and vice versa. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The swapped terminology is <em>bound</em> to cause confusion, possibly anger. I'm sticking to the FPS-friendly terminology for the rest of the article, because that's what I know best. But the point of this article is less about terminology, and more about the concept. Call these boxes whatever works best for you in your own projects. For example, AttackBox and DefenseBox are one more explicit option.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The different identification of these boxes led me to my final approach: multiple boxes, each defining a different spatial representation of the player.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="solution">Boxing Day</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I categorized and defined the three different spatial representations of the characters:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Hitbox</strong><br>The area where the character can get hit (where they are vulnerable)</li><li><strong>Hurtbox</strong><br>The area where the character hurts others (where they attack)</li><li><strong>Bounding Box</strong><br>The space the character occupies according to obstacles (platforms, walls)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Then I organized my colliders in game to represent this scheme.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":206,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Goat-HitHurtBoundingBox-1.gif" alt="" class="wp-image-206"/><figcaption>Final box design of my Goat character</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>And I did the same thing with the enemies.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then I set up my game engine (Unity) with the following rules:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Player Hurtboxes should collide with Enemy Hitboxes</li><li>Enemy Hurtboxes should collide with Player Hitboxes</li><li>Players or Enemies bump into the environment</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>(I explain how to do all of this in Unity <a href="#implementation">further below</a>)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Results</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I'm really happy with this solution, it solves a lot of the problems of the other four. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The player can get a stomp even when the Goat is a few pixels away. This fixes the problem with Tight Hitboxes. See how the Goat's Hurtbox and the Enemy's Hitbox connect even from some distance:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":209,"width":300,"height":300,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Goat-ForgiveStomp.gif" alt="" class="wp-image-209" width="300" height="300"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>But they can still narrowly avoid an Enemy on the upward jump. This is an improvement over the Loose Hitboxes. Check out how the Goat's Hitbox and Enemy's Hurtbox near-miss eachother in this gif:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":208,"width":300,"height":300,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Goat-CloseCall.gif" alt="" class="wp-image-208" width="300" height="300"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The player gets room to breath, but can still stomp without feeling cheated.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I didn't want my game to be <em>too </em>easy, but now I at least have control over how easy it is. For example, I could increase the width of the Goat's Hurtbox and the Enemy's Hitbox with no negative side effects. This would make it easier for the Goat to get a Stomp in, and still stay safe while jumping upward.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's pretty easy to get this all set up.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="implementation">Implementation in Unity</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 1: Setup your layers</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For a one-size-fits-all solution to this problem in Unity, you'll need six layers. You could probably get away with less, but this really makes it obvious what's happening under the hood.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":155,"width":312,"height":417,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Screen-Shot-2020-03-19-at-2.04.48-PM-1.png" alt="" class="wp-image-155" width="312" height="417"/><figcaption>6 Layers for Hitboxes That Feel Good™️</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 2: Setup the collision matrix</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You'll need to tweak the collision matrix to support this scheme, as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":157,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/image.png" alt="" class="wp-image-157"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Notice how few checkmarks there are. There's really only 3 collisions we need to worry about</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Player hurts an Enemy</li><li>Player gets hurt by an Enemy</li><li>Player or Enemy bump into the environment</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 3: Setup your characters' boxes</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now for the actual characters. Each box will be represented as a Collider2d (this concept works in 3d too however). Since Unity only allows one  Collider per GameObject, we need to store 2 of the Colliders on child GameObjects. This makes the solution a bit more complex, but it's manageable.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So that's one parent GameObject representing the character's Bounding Box. One child GameObject for the Hitbox. And a sibling to that child, a GameObject for the Hurtbox. Let's see what that looks like as a hierarchy:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":371,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://subpixel.net/wp-content/uploads/2020/04/image-1024x427.png" alt="" class="wp-image-371"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the real world, in Unity, that translates to this:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> <img class="wp-image-163" style="width: 256px;" src="https://www.subpixel.net/wp-content/uploads/2020/03/image-4.png" alt=""> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My parent GameObject gets the Bounding Box Collider. Therefore, it's also on the <code>BoundingBoxes</code> layer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><img class="wp-image-164" style="width: 256px;" src="https://www.subpixel.net/wp-content/uploads/2020/03/Screen-Shot-2020-03-19-at-2.45.26-PM.png" alt=""> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The two children, Hitbox and Hurtbox, get their Colliders on the appropriate layers as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><img class="wp-image-165" style="width: 256px;" src="https://www.subpixel.net/wp-content/uploads/2020/03/Screen-Shot-2020-03-19-at-2.45.32-PM.png" alt=""> <img class="wp-image-166" style="width: 256px;" src="https://www.subpixel.net/wp-content/uploads/2020/03/Screen-Shot-2020-03-19-at-2.45.39-PM.png" alt=""></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that all my colliders have <code>Is Trigger</code> checked. That's because I don't use the built in Unity Physics system for Ready Set Goat. I handle all of the collision interactions manually, and triggers simply notify me when they happen. Triggers don't simulate physics reactions, they just alert you when an overlap occurs. If you want to use Unity Physics with this approach, you might want to uncheck the <code>Is Trigger</code> box, and add some RigidBody's to the root GameObject.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anyway, here's that gif of the goat again, showing what these 3 colliders look like in one image.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":206,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Goat-HitHurtBoundingBox-1.gif" alt="" class="wp-image-206"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The same approach is taken with my enemy characters, except I use the <code>EnemyHitboxes</code> and <code>EnemyHurtboxes</code> layers instead:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><img class="wp-image-167" style="width: 150px;" src="https://www.subpixel.net/wp-content/uploads/2020/03/Screen-Shot-2020-03-19-at-2.54.14-PM.png" alt=""> <img class="wp-image-168" style="width: 150px;" src="https://www.subpixel.net/wp-content/uploads/2020/03/Screen-Shot-2020-03-19-at-2.54.18-PM.png" alt=""> <img class="wp-image-169" style="width: 150px;" src="https://www.subpixel.net/wp-content/uploads/2020/03/Screen-Shot-2020-03-19-at-2.54.26-PM.png" alt=""></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 4: Attack!</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For the final step, you'll need to add code that reacts to collisions. I like to put "attack" code to the attacker itself. A simple way to do that is to put a script on your Hurtboxes' GameObjects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, on my Player's Hurtbox, I want to handle Stomps.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":170,"width":367,"height":217,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/image-5.png" alt="" class="wp-image-170" width="367" height="217"/><figcaption>A script that detects when a Player stomps on an Enemy, and applies damage as necessary</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Your script might look something like this</p>
<!-- /wp:paragraph -->

<!-- wp:melonpan-block/code {"language":"csharp","theme":"atom_dark","view":"previewer","label_enabled":true} -->
<div class="wp-block-melonpan-block-code mbcode-theme-atom_dark mbcode-scheme-dark mbcode-padding_tb-40 mbcode-padding_lr-30" data-language="csharp"><pre><code>using UnityEngine;

public class Stomp : MonoBehaviour {
  private float _prevY;

  private void FixedUpdate() {
    _prevY = transform.position.y;
  }

  private bool IsDescending() {
    return transform.position.y &lt; _prevY;
  }

  private void OnTriggerEnter2D(Collider2D collider) {
    if (IsDescending()) {
      Debug.Log("Player stomped an Enemy. Destroying the Enemy.");
      Destroy(collider.gameObject);
    }
  }
}
</code></pre><div class="mbcode-label"><span>C#</span></div></div>
<!-- /wp:melonpan-block/code -->

<!-- wp:paragraph -->
<p>One thing to note here: Stomps can only occur if the player is descending vertically. They can't stomp <em>upward</em>. For simplicity's sake, I'm calculating that by tracking their previous y coordinate and ensuring that their current y coordinate is lower.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Your enemies will need to attack too. Let's add a script for that:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":172,"width":369,"height":218,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Screen-Shot-2020-03-19-at-3.13.28-PM.png" alt="" class="wp-image-172" width="369" height="218"/><figcaption>The attack script that enemies have</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>And the code is pretty similar, except we don't need to check if the enemy is descending vertically:</p>
<!-- /wp:paragraph -->

<!-- wp:melonpan-block/code {"language":"csharp","view":"previewer"} -->
<div class="wp-block-melonpan-block-code mbcode-theme-tomorrow_night mbcode-scheme-dark mbcode-padding_tb-40 mbcode-padding_lr-30" data-language="csharp"><pre><code>using UnityEngine;

public class KillPlayerOnTouch : MonoBehaviour {
  private void OnTriggerEnter2D(Collider2D collider) {
    Debug.Log("Enemy touched a Player. Killing Player.");
    Destroy(collider.gameObject);
  }
}</code></pre></div>
<!-- /wp:melonpan-block/code -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 5</strong>:<strong> Report</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There's one thing missing here. In both the <code>Stomp</code> and <code>KillPlayerOnTouch</code> scripts, the colliding object (a Hitbox) gets destroyed. If you recall, that object is actually a <em>child</em> of the character. We want to destroy the <em>entire</em> character, not just their Hitbox. To do this, one more script can help.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that I'm no longer working on the Hurtboxes. I'm placing this script on the Hitbox. Here's an example of my Player's Hitbox:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":176,"width":370,"height":236,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Screen-Shot-2020-03-19-at-3.26.42-PM.png" alt="" class="wp-image-176" width="370" height="236"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The <code>InformParentOnDestroy</code> script will simply call <code>Destroy</code> on a specific object when the Hitbox itself is destroyed. We could <em>guess</em> what the Parent is, say, by calling <code>transform.parent.gameObject</code>. But in practice, your character prefab hierarchies will be much deeper and complex. It's better to be explicit here. Here's an example of what that code looks like:</p>
<!-- /wp:paragraph -->

<!-- wp:melonpan-block/code {"language":"csharp","view":"previewer"} -->
<div class="wp-block-melonpan-block-code mbcode-theme-tomorrow_night mbcode-scheme-dark mbcode-padding_tb-40 mbcode-padding_lr-30" data-language="csharp"><pre><code>using UnityEngine;

public class InformParentOnDestroy : MonoBehaviour {
  public GameObject Parent;

  private void OnDestroy() {
    Destroy(Parent);
  }
}</code></pre></div>
<!-- /wp:melonpan-block/code -->

<!-- wp:paragraph -->
<p>Simple enough.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Next Steps</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This example makes a lot of assumptions, and there's still a lot of work to do  to get this production ready. But if you're working on a similar game mechanic, I hope this sets you in the right direction.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some other things I've done to make sure Ready Set Goat feels good to the player.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>Choose hit/hurtboxes that favor the Player</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The favored character (usually the Player), should have a larger hurtbox than their hitbox. The unfavored character (the Enemy), should have the opposite; a larger hitbox than hurtbox. That will ensure that they Player's Stomp gets detected before the Enemy's touch. You can experiment with other hitbox/hurtbox sizes to accomplish something similar though.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><a href="https://gafferongames.com/post/fix_your_timestep/#semi-fixed-timestep"><strong>Fix Your Timestep!</strong></a></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This can help ensure that every subtle movement the characters make is processed, independent of the framerate. It'll ensure your characters don't end up moving through eachother, leaving you with a chicken and egg problem (did the player's stomp land first or did the enemy's hit land first?).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>Execute Stomp code before KillPlayerOnTouch code</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There's no <em>great</em> way to ensure one component's <code>OnTriggersEnter</code> methods get executed before another's in Unity.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My personal approach is to create a new Monobehaviour (let's call it <code>CollisionResolver</code>) and add it to the stage. Now <code>Stomp</code> and <code>KillPlayerOnTouch</code> must no longer Destroy any GameObjects directly. Instead they must inform <code>CollisionResolver</code> that a collision occurred. <code>CollisionResolver</code> can then process <em>all</em> the collisions it heard about on Update, in whatever order it chooses. In my game, it would process all <code>Stomp</code> reports before <code>KillPlayerOnTouch</code>'s, because I want to favor the Player's attack.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That approach is just a bit outside the scope of this post, so I leave it as an exercise to the reader.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":195,"width":300,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img src="https://www.subpixel.net/wp-content/uploads/2020/03/Goat-CoolRun.gif" alt="" class="wp-image-195" width="300"/></figure></div>
<!-- /wp:image -->